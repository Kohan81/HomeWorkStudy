Вспомним нашего старого знакомого робота из этой задачи. Теперь мы будем давать роботу команды удаленно,
подключаясь к нему по беспроводному каналу связи.

Подключение к роботу представляется в программе интерфейсом RobotConnection:

public interface RobotConnection extends AutoCloseable {
    void moveRobotTo(int x, int y);
    @Override
    void close();
}
Да, робот с тех пор поумнел и стал понимать команду на перемещение в заданную точку (метод moveRobotTo).
Ему больше не нужны пошаговые инструкции.
RobotConnection — это временно устанавливаемое соединение, которое надо закрывать, когда оно больше не нужно.
Для закрытия соединения в интерфейсе есть метод close().

За установку соединения отвечает RobotConnectionManager:

public interface RobotConnectionManager {
    RobotConnection getConnection();
}
Метод getConnection() делает попытку соединиться с роботом и возвращает установленное соединение,
через которое можно отдавать роботу команды.
Установка соединения может завершиться неуспешно, а также уже установленное соединение может внезапно разорваться.
Всякое бывает. Поэтому любой метод RobotConnectionManager и RobotConnection может бросить непроверяемое исключение
RobotConnectionException:

public class RobotConnectionException extends RuntimeException {

    public RobotConnectionException(String message) {
        super(message);

    }

    public RobotConnectionException(String message, Throwable cause) {
        super(message, cause);
    }
}
Ваша задача — реализовать метод который устанавливает соединение с роботом, отдает ему команду на перемещение в
заданную точку и затем закрывает соединение, выполняя при необходимости повтор этой последовательности до трех раз.

При этом:

Попытка отдать команду роботу считается успешной, если удалось установить соединение и выполнить метод
RobotConnection.moveRobotTo() без исключений.
 Ошибка закрытия соединения не важна и должна игнорироваться.
Если первая попытка подключиться и отдать команду оказалась неуспешной, то закрываем соединение и выполняем
вторую попытку. Если вторая тоже не удалась, то выполняется третья. После третьей неудачи метод должен бросить
исключение RobotConnectionException.
Метод отвечает за открытие и закрытие соединения. Если соединение удалось установить, то оно обязательно должно
быть закрыто несмотря на возможные исключения, случившиеся в дальнейшем во время работы метода.
Если во время работы метода случилось исключение любого типа, отличного от RobotConnectionException, метод должен
завершиться и выбросить это исключение, не выполняя повторных попыток пообщаться с роботом. Единственное, что метод
должен сделать перед выбросом этого исключения — закрыть открытое соединение RobotConnection.
Напишите программу. Тестируется через stdin → stdout
Верно решили 10 932 учащихся
Из всех попыток 10% верных
 Всё получилось!
Теперь вам доступен Форум решений , где вы можете сравнить свое решение с другими или спросить совета.
Вы решили сложную задачу, поздравляем! Вы можете помочь остальным учащимся в комментариях, отвечая на их вопросы,
или сравнить своё решение с другими на форуме решений.
}
1
public static void moveRobot(RobotConnectionManager robotConnectionManager, int toX, int toY) {
2
    RobotConnection connection = null;
3
    RobotConnectionException lastException = null;
4

5
    for (int attempt = 0; attempt < 3; attempt++) {
6
        try {
7
            connection = robotConnectionManager.getConnection();
8
            connection.moveRobotTo(toX, toY);
9
            return; // Успешное выполнение, выходим из метода
10
        } catch (RobotConnectionException e) {
11
            lastException = e; // Сохраняем последнее исключение для возможного проброса
12
        } finally {
13
            if (connection != null) {
14
                try {
15
                    connection.close();
16
                } catch (Exception e) {
17
                    // Игнорируем ошибки при закрытии соединения
18
                }
19
            }
20
        }
21
    }
22
    // Если дошли сюда, значит, все 3 попытки неудачны
23
    throw lastException;
24
}

Вот еще интересное решение:

public static void moveRobot(RobotConnectionManager robotConnectionManager, int toX, int toY) {
    for (int i = 0; i < 3; i++) {
        try (RobotConnection robotConnection = robotConnectionManager.getConnection()) {
            robotConnection.moveRobotTo(toX, toY);
            i = 3;
        } catch (RobotConnectionException e) {
            if (i == 2) throw e;
        }
    }
}